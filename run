#!/bin/bash

#Define script path:
script_path=$(
    cd "$(dirname "${BASH_SOURCE[0]}")" || exit
    pwd -P
)

#Define menu settings:
height=20
width=50
choice_height=10

#Define image options based on dockerfiles in dockerfiles directory:
options=()
for dockerfile in "$script_path"/dockerfiles/*.Dockerfile; do
    name=${dockerfile%.*}
    options+=("$(basename "$name")")
    options+=("")
done

#Ask user for image option:
image=$(whiptail --clear \
    --title "RCDT Docker Launcher" \
    --menu "Which docker image would you like to run?" \
    $height $width $choice_height \
    "${options[@]}" \
    2>&1 >/dev/tty)
clear
[[ -z "$image" ]] && { return 1; }

#Check if the image is already installed:
lines=$(docker images "$image" | wc -l)
if [ "$lines" == 2 ]; then
    installed=true
else
    installed=false
fi

#If no docker_ws directory exists, create it:
mkdir -p ~/docker_ws
mkdir -p ~/.vscode-server

#If installed, launch the image with xhost:
if $installed; then
    printf 'Starting %s...\n\n' "$image"

    printf "Get acces to xhost...\n"
    xhost +local:docker
    printf "Done. \n\n"

    docker run -it --privileged --rm \
        --memory=6g \
        --env DISPLAY \
        --env RCUTILS_COLORIZED_OUTPUT=1 \
        --network=host \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /dev/input:/dev/input \
        -v ~/.vscode-server:/home/"$USER"/.vscode-server \
        -v ~/docker_ws:/home/"$USER"/docker_ws \
        "$image"

    printf "\nStop accces to xhost...\n"
    xhost -local:docker
    printf "Done.\n"
#If not installed, ask to install:
else
    build=$(whiptail --title "Install?" \
        --menu "The selected image was not found. Do you want to install the image?" \
        $height $width $choice_height \
        "yes" "" \
        "yes, without cache" "" \
        "no" "" \
        2>&1 >/dev/tty)
    clear
    [[ -z "$build" ]] && { return 1; }

    if [ "$build" == "yes" ]; then
        # Build with cache:
        docker build \
            --memory=6g \
            --build-arg UNAME="$USER" \
            --build-arg UID="$(id -u)" \
            --build-arg GID="$(id -g)" \
            -t "$image" \
            -f "$script_path/dockerfiles/$image.Dockerfile" \
            "$script_path/dockerfiles"
    elif [ "$build" == "yes, without cache" ]; then
        # Build without cache:
        docker build \
            --no-cache \
            --memory=6g \
            --build-arg UNAME="$USER" \
            --build-arg UID="$(id -u)" \
            --build-arg GID="$(id -g)" \
            -t "$image" \
            -f "$script_path/dockerfiles/$image.Dockerfile" \
            "$script_path/dockerfiles"
    else
        return 1
    fi
fi
